import { EventEmitter, InjectionToken } from '@angular/core';
export const NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');
export const NEW_CONFIG = new InjectionToken('new ngx-mask config');
export const INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');
export const initialConfig = {
    suffix: '',
    prefix: '',
    thousandSeparator: ' ',
    decimalMarker: ['.', ','],
    clearIfNotMatch: false,
    showTemplate: false,
    showMaskTyped: false,
    placeHolderCharacter: '_',
    dropSpecialCharacters: true,
    hiddenInput: undefined,
    shownMaskExpression: '',
    separatorLimit: '',
    allowNegativeNumbers: false,
    validation: true,
    // eslint-disable-next-line @typescript-eslint/quotes
    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '"', "'"],
    leadZeroDateTime: false,
    leadZero: false,
    triggerOnMaskChange: false,
    maskFilled: new EventEmitter(),
    patterns: {
        '0': {
            pattern: new RegExp('\\d'),
        },
        '9': {
            pattern: new RegExp('\\d'),
            optional: true,
        },
        X: {
            pattern: new RegExp('\\d'),
            symbol: '*',
        },
        A: {
            pattern: new RegExp('[a-zA-Z0-9]'),
        },
        S: {
            pattern: new RegExp('[a-zA-Z]'),
        },
        U: {
            pattern: new RegExp('[A-Z]'),
        },
        L: {
            pattern: new RegExp('[a-z]'),
        },
        d: {
            pattern: new RegExp('\\d'),
        },
        m: {
            pattern: new RegExp('\\d'),
        },
        M: {
            pattern: new RegExp('\\d'),
        },
        H: {
            pattern: new RegExp('\\d'),
        },
        h: {
            pattern: new RegExp('\\d'),
        },
        s: {
            pattern: new RegExp('\\d'),
        },
    },
};
export const timeMasks = [
    "Hh:m0:s0" /* MaskExpression.HOURS_MINUTES_SECONDS */,
    "Hh:m0" /* MaskExpression.HOURS_MINUTES */,
    "m0:s0" /* MaskExpression.MINUTES_SECONDS */,
];
export const withoutValidation = [
    "percent" /* MaskExpression.PERCENT */,
    "Hh" /* MaskExpression.HOURS_HOUR */,
    "s0" /* MaskExpression.SECONDS */,
    "m0" /* MaskExpression.MINUTES */,
    "separator" /* MaskExpression.SEPARATOR */,
    "d0/M0/0000" /* MaskExpression.DAYS_MONTHS_YEARS */,
    "d0/M0" /* MaskExpression.DAYS_MONTHS */,
    "d0" /* MaskExpression.DAYS */,
    "M0" /* MaskExpression.MONTHS */,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hc2suY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hc2stbGliL3NyYy9saWIvbmd4LW1hc2suY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBaUM3RCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQTRCLElBQUksY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDOUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUE0QixJQUFJLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBNEIsSUFBSSxjQUFjLENBQ3JFLHlCQUF5QixDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFZO0lBQ2xDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsTUFBTSxFQUFFLEVBQUU7SUFDVixpQkFBaUIsRUFBRSxHQUFHO0lBQ3RCLGFBQWEsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDekIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsWUFBWSxFQUFFLEtBQUs7SUFDbkIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsb0JBQW9CLEVBQUUsR0FBRztJQUN6QixxQkFBcUIsRUFBRSxJQUFJO0lBQzNCLFdBQVcsRUFBRSxTQUFTO0lBQ3RCLG1CQUFtQixFQUFFLEVBQUU7SUFDdkIsY0FBYyxFQUFFLEVBQUU7SUFDbEIsb0JBQW9CLEVBQUUsS0FBSztJQUMzQixVQUFVLEVBQUUsSUFBSTtJQUNoQixxREFBcUQ7SUFDckQsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3pGLGdCQUFnQixFQUFFLEtBQUs7SUFDdkIsUUFBUSxFQUFFLEtBQUs7SUFDZixtQkFBbUIsRUFBRSxLQUFLO0lBQzFCLFVBQVUsRUFBRSxJQUFJLFlBQVksRUFBUTtJQUNwQyxRQUFRLEVBQUU7UUFDTixHQUFHLEVBQUU7WUFDRCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzdCO1FBQ0QsR0FBRyxFQUFFO1lBQ0QsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztZQUMxQixRQUFRLEVBQUUsSUFBSTtTQUNqQjtRQUNELENBQUMsRUFBRTtZQUNDLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDMUIsTUFBTSxFQUFFLEdBQUc7U0FDZDtRQUNELENBQUMsRUFBRTtZQUNDLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUM7U0FDckM7UUFDRCxDQUFDLEVBQUU7WUFDQyxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDO1NBQ2xDO1FBQ0QsQ0FBQyxFQUFFO1lBQ0MsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUMvQjtRQUNELENBQUMsRUFBRTtZQUNDLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDL0I7UUFDRCxDQUFDLEVBQUU7WUFDQyxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzdCO1FBQ0QsQ0FBQyxFQUFFO1lBQ0MsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztTQUM3QjtRQUNELENBQUMsRUFBRTtZQUNDLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDN0I7UUFDRCxDQUFDLEVBQUU7WUFDQyxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzdCO1FBQ0QsQ0FBQyxFQUFFO1lBQ0MsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztTQUM3QjtRQUNELENBQUMsRUFBRTtZQUNDLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDN0I7S0FDSjtDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQWE7Ozs7Q0FJbEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFhOzs7Ozs7Ozs7O0NBVTFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXNrRXhwcmVzc2lvbiB9IGZyb20gJy4vbmd4LW1hc2stZXhwcmVzc2lvbi5lbnVtJztcblxuZXhwb3J0IGludGVyZmFjZSBJQ29uZmlnIHtcbiAgICBzdWZmaXg6IHN0cmluZztcbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICB0aG91c2FuZFNlcGFyYXRvcjogc3RyaW5nO1xuICAgIGRlY2ltYWxNYXJrZXI6ICcuJyB8ICcsJyB8IFsnLicsICcsJ107XG4gICAgY2xlYXJJZk5vdE1hdGNoOiBib29sZWFuO1xuICAgIHNob3dUZW1wbGF0ZTogYm9vbGVhbjtcbiAgICBzaG93TWFza1R5cGVkOiBib29sZWFuO1xuICAgIHBsYWNlSG9sZGVyQ2hhcmFjdGVyOiBzdHJpbmc7XG4gICAgc2hvd25NYXNrRXhwcmVzc2lvbjogc3RyaW5nO1xuICAgIGRyb3BTcGVjaWFsQ2hhcmFjdGVyczogYm9vbGVhbiB8IHN0cmluZ1tdO1xuICAgIHNwZWNpYWxDaGFyYWN0ZXJzOiBzdHJpbmdbXTtcbiAgICBoaWRkZW5JbnB1dDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICB2YWxpZGF0aW9uOiBib29sZWFuO1xuICAgIHNlcGFyYXRvckxpbWl0OiBzdHJpbmc7XG4gICAgYWxsb3dOZWdhdGl2ZU51bWJlcnM6IGJvb2xlYW47XG4gICAgbGVhZFplcm9EYXRlVGltZTogYm9vbGVhbjtcbiAgICBsZWFkWmVybzogYm9vbGVhbjtcbiAgICB0cmlnZ2VyT25NYXNrQ2hhbmdlOiBib29sZWFuO1xuICAgIG1hc2tGaWxsZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBwYXR0ZXJuczoge1xuICAgICAgICBbY2hhcmFjdGVyOiBzdHJpbmddOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHA7XG4gICAgICAgICAgICBvcHRpb25hbD86IGJvb2xlYW47XG4gICAgICAgICAgICBzeW1ib2w/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IHR5cGUgb3B0aW9uc0NvbmZpZyA9IFBhcnRpYWw8SUNvbmZpZz47XG5leHBvcnQgY29uc3QgTkdYX01BU0tfQ09ORklHOiBJbmplY3Rpb25Ub2tlbjxJQ29uZmlnPiA9IG5ldyBJbmplY3Rpb25Ub2tlbignbmd4LW1hc2sgY29uZmlnJyk7XG5leHBvcnQgY29uc3QgTkVXX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48SUNvbmZpZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ25ldyBuZ3gtbWFzayBjb25maWcnKTtcbmV4cG9ydCBjb25zdCBJTklUSUFMX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48SUNvbmZpZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICAgJ2luaXRpYWwgbmd4LW1hc2sgY29uZmlnJ1xuKTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxDb25maWc6IElDb25maWcgPSB7XG4gICAgc3VmZml4OiAnJyxcbiAgICBwcmVmaXg6ICcnLFxuICAgIHRob3VzYW5kU2VwYXJhdG9yOiAnICcsXG4gICAgZGVjaW1hbE1hcmtlcjogWycuJywgJywnXSxcbiAgICBjbGVhcklmTm90TWF0Y2g6IGZhbHNlLFxuICAgIHNob3dUZW1wbGF0ZTogZmFsc2UsXG4gICAgc2hvd01hc2tUeXBlZDogZmFsc2UsXG4gICAgcGxhY2VIb2xkZXJDaGFyYWN0ZXI6ICdfJyxcbiAgICBkcm9wU3BlY2lhbENoYXJhY3RlcnM6IHRydWUsXG4gICAgaGlkZGVuSW5wdXQ6IHVuZGVmaW5lZCxcbiAgICBzaG93bk1hc2tFeHByZXNzaW9uOiAnJyxcbiAgICBzZXBhcmF0b3JMaW1pdDogJycsXG4gICAgYWxsb3dOZWdhdGl2ZU51bWJlcnM6IGZhbHNlLFxuICAgIHZhbGlkYXRpb246IHRydWUsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9xdW90ZXNcbiAgICBzcGVjaWFsQ2hhcmFjdGVyczogWyctJywgJy8nLCAnKCcsICcpJywgJy4nLCAnOicsICcgJywgJysnLCAnLCcsICdAJywgJ1snLCAnXScsICdcIicsIFwiJ1wiXSxcbiAgICBsZWFkWmVyb0RhdGVUaW1lOiBmYWxzZSxcbiAgICBsZWFkWmVybzogZmFsc2UsXG4gICAgdHJpZ2dlck9uTWFza0NoYW5nZTogZmFsc2UsXG4gICAgbWFza0ZpbGxlZDogbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpLFxuICAgIHBhdHRlcm5zOiB7XG4gICAgICAgICcwJzoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICAgICAgJzknOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKCdcXFxcZCcpLFxuICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIFg6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ1xcXFxkJyksXG4gICAgICAgICAgICBzeW1ib2w6ICcqJyxcbiAgICAgICAgfSxcbiAgICAgICAgQToge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnW2EtekEtWjAtOV0nKSxcbiAgICAgICAgfSxcbiAgICAgICAgUzoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnW2EtekEtWl0nKSxcbiAgICAgICAgfSxcbiAgICAgICAgVToge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnW0EtWl0nKSxcbiAgICAgICAgfSxcbiAgICAgICAgTDoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnW2Etel0nKSxcbiAgICAgICAgfSxcbiAgICAgICAgZDoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICAgICAgbToge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICAgICAgTToge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICAgICAgSDoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICAgICAgaDoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICAgICAgczoge1xuICAgICAgICAgICAgcGF0dGVybjogbmV3IFJlZ0V4cCgnXFxcXGQnKSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IHRpbWVNYXNrczogc3RyaW5nW10gPSBbXG4gICAgTWFza0V4cHJlc3Npb24uSE9VUlNfTUlOVVRFU19TRUNPTkRTLFxuICAgIE1hc2tFeHByZXNzaW9uLkhPVVJTX01JTlVURVMsXG4gICAgTWFza0V4cHJlc3Npb24uTUlOVVRFU19TRUNPTkRTLFxuXTtcblxuZXhwb3J0IGNvbnN0IHdpdGhvdXRWYWxpZGF0aW9uOiBzdHJpbmdbXSA9IFtcbiAgICBNYXNrRXhwcmVzc2lvbi5QRVJDRU5ULFxuICAgIE1hc2tFeHByZXNzaW9uLkhPVVJTX0hPVVIsXG4gICAgTWFza0V4cHJlc3Npb24uU0VDT05EUyxcbiAgICBNYXNrRXhwcmVzc2lvbi5NSU5VVEVTLFxuICAgIE1hc2tFeHByZXNzaW9uLlNFUEFSQVRPUixcbiAgICBNYXNrRXhwcmVzc2lvbi5EQVlTX01PTlRIU19ZRUFSUyxcbiAgICBNYXNrRXhwcmVzc2lvbi5EQVlTX01PTlRIUyxcbiAgICBNYXNrRXhwcmVzc2lvbi5EQVlTLFxuICAgIE1hc2tFeHByZXNzaW9uLk1PTlRIUyxcbl07XG4iXX0=